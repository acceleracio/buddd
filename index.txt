<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Website Access with OTP</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .login-form {
            margin-bottom: 20px;
        }
        input[type="email"], input[type="text"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #45a049;
        }
        .message {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
        }
        .error {
            background-color: #ffebee;
            color: #c62828;
        }
        .success {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        iframe {
            width: 100%;
            height: 600px;
            border: none;
            display: none;
        }
        .access-denied {
            text-align: center;
            padding: 30px;
            background-color: #ffebee;
            border-radius: 8px;
            margin: 20px 0;
        }
        .access-denied h2 {
            color: #c62828;
            margin-bottom: 15px;
        }
        .access-denied p {
            color: #333;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Website Access Control</h1>
        <div class="login-form" id="loginForm">
            <h2>Enter your credentials to access the website</h2>
            <div>
                <label for="email">Email:</label>
                <input type="email" id="email" placeholder="Enter your email">
            </div>
            <div>
                <label for="otp">OTP:</label>
                <input type="text" id="otp" placeholder="Enter your OTP">
            </div>
            <button onclick="verifyOTP()">Submit</button>
            <div id="message" class="message"></div>
        </div>
        
        <div id="accessDeniedContainer" style="display:none" class="access-denied">
            <h2>Access Denied</h2>
            <p>The OTP you entered has already been used or is invalid.</p>
            <p>Please generate a new OTP to continue.</p>
            <button onclick="resetLoginForm()">Try Again</button>
        </div>
        
        <div id="iframeContainer">
            <iframe id="websiteFrame" src="" title="Embedded Website"></iframe>
        </div>
    </div>

    <script>
        // Check if already authenticated in this session
        window.onload = function() {
            checkAuthenticationStatus();
        };
        
        // Check if user is authenticated and show the appropriate view
        function checkAuthenticationStatus() {
            const isAuthenticated = sessionStorage.getItem('isAuthenticated');
            const targetWebsite = sessionStorage.getItem('targetWebsite');
            
            if (isAuthenticated === 'true' && targetWebsite) {
                // User is already authenticated, show the iframe directly
                document.getElementById('loginForm').style.display = 'none';
                document.getElementById('websiteFrame').src = targetWebsite;
                document.getElementById('websiteFrame').style.display = 'block';
            }
        }
        
        // Simulated cloud storage service for OTPs
        class CloudStorageService {
            constructor() {
                this.apiUrl = 'https://api.cloudotpservice.com/v1'; // Simulated API endpoint
                this.apiKey = 'sim_cld_key_123456789'; // Simulated API key
                
                // In-memory map to track used OTPs (in production this would be in the database)
                this.usedOTPs = new Set();
            }
            
            // Get OTP for a specific email
            async getOTP(email) {
                // In a real implementation, this would be an actual API call
                // For simulation, we're using a fetch with artificial delay
                console.log(`Getting OTP for ${email} from cloud storage`);
                
                return new Promise((resolve, reject) => {
                    // Simulate network request
                    setTimeout(() => {
                        // Check if this email has an OTP in our simulated database
                        fetch(`${this.apiUrl}/otps/${encodeURIComponent(email)}`, {
                            method: 'GET',
                            headers: {
                                'Authorization': `Bearer ${this.apiKey}`,
                                'Content-Type': 'application/json'
                            }
                        })
                        .then(response => {
                            // Simulate the API response
                            // This would normally come from the server
                            // For demo, we'll check our message event store
                            const storedOTP = window.receivedOTPs ? window.receivedOTPs[email] : null;
                            
                            if (storedOTP) {
                                // Check if this OTP has been used before
                                if (this.usedOTPs.has(`${email}:${storedOTP}`)) {
                                    resolve({status: 'already_used'});
                                } else {
                                    resolve({status: 'valid', otp: storedOTP});
                                }
                            } else {
                                resolve({status: 'not_found'});
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching OTP:', error);
                            reject(error);
                        });
                    }, 300); // Simulate network delay
                });
            }
            
            // Store a new OTP
            async storeOTP(email, otp) {
                console.log(`Storing OTP for ${email} in cloud storage`);
                
                return new Promise((resolve, reject) => {
                    // Simulate network request
                    setTimeout(() => {
                        try {
                            // Initialize our received OTPs object if it doesn't exist
                            if (!window.receivedOTPs) {
                                window.receivedOTPs = {};
                            }
                            
                            // Store the OTP in our simulation object
                            window.receivedOTPs[email] = otp;
                            
                            // Simulate fetch to cloud service
                            fetch(`${this.apiUrl}/otps`, {
                                method: 'POST',
                                headers: {
                                    'Authorization': `Bearer ${this.apiKey}`,
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ email, otp })
                            })
                            .then(() => {
                                resolve(true);
                            })
                            .catch(error => {
                                console.error('Error storing OTP:', error);
                                reject(error);
                            });
                        } catch (error) {
                            console.error('Error in storeOTP:', error);
                            reject(error);
                        }
                    }, 300); // Simulate network delay
                });
            }
            
            // Mark an OTP as used
            async markOTPAsUsed(email, otp) {
                console.log(`Marking OTP for ${email} as used`);
                
                return new Promise((resolve, reject) => {
                    try {
                        // Add to used OTPs set
                        this.usedOTPs.add(`${email}:${otp}`);
                        
                        // Simulate network request
                        setTimeout(() => {
                            // Simulate fetch to cloud service
                            fetch(`${this.apiUrl}/otps/${encodeURIComponent(email)}/use`, {
                                method: 'POST',
                                headers: {
                                    'Authorization': `Bearer ${this.apiKey}`,
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ otp })
                            })
                            .then(() => {
                                resolve(true);
                            })
                            .catch(error => {
                                console.error('Error marking OTP as used:', error);
                                reject(error);
                            });
                        }, 300); // Simulate network delay
                    } catch (error) {
                        console.error('Error in markOTPAsUsed:', error);
                        reject(error);
                    }
                });
            }
        }
        
        // Initialize cloud storage service
        const cloudStorage = new CloudStorageService();
        
        // Listen for OTP updates from Site 2
        window.addEventListener('message', function(event) {
            // You would normally check the origin for security
            // if (event.origin !== "https://yourtrustedorigin.com") return;
            
            if (event.data.type === "otpUpdate") {
                // Store the new OTP in cloud storage
                cloudStorage.storeOTP(event.data.email, event.data.otp)
                    .then(() => {
                        console.log("OTP stored in cloud for: " + event.data.email);
                    })
                    .catch(error => {
                        console.error("Failed to store OTP:", error);
                    });
            }
        });
        
        // Reset the login form for a new attempt
        function resetLoginForm() {
            document.getElementById('email').value = '';
            document.getElementById('otp').value = '';
            document.getElementById('message').textContent = '';
            document.getElementById('message').className = 'message';
            document.getElementById('accessDeniedContainer').style.display = 'none';
            document.getElementById('loginForm').style.display = 'block';
        }
        
        async function verifyOTP() {
            const email = document.getElementById('email').value.trim();
            const otp = document.getElementById('otp').value.trim();
            const messageDiv = document.getElementById('message');
            
            // Show loading state
            messageDiv.className = "message";
            messageDiv.textContent = "Verifying...";
            
            // Validate inputs
            if (!email || !otp) {
                messageDiv.className = "message error";
                messageDiv.textContent = "Please enter both email and OTP";
                return;
            }
            
            try {
                // Fetch the stored OTP from cloud storage
                const result = await cloudStorage.getOTP(email);
                
                // Check the status of the OTP
                if (result.status === 'not_found') {
                    messageDiv.className = "message error";
                    messageDiv.textContent = "No OTP found for this email. Please generate an OTP first.";
                    return;
                }
                
                if (result.status === 'already_used') {
                    // Show the access denied screen
                    document.getElementById('loginForm').style.display = 'none';
                    document.getElementById('accessDeniedContainer').style.display = 'block';
                    return;
                }
                
                // Verify OTP
                if (result.status === 'valid' && result.otp === otp) {
                    // Success! Show the iframe
                    messageDiv.className = "message success";
                    messageDiv.textContent = "OTP verified successfully! Loading website...";
                    
                    // Mark this OTP as used
                    await cloudStorage.markOTPAsUsed(email, otp);
                    
                    // Save authentication state in session storage
                    const targetWebsite = "https://example.com"; // Replace with your target website
                    sessionStorage.setItem('isAuthenticated', 'true');
                    sessionStorage.setItem('targetWebsite', targetWebsite);
                    
                    // Load and show the iframe
                    document.getElementById('loginForm').style.display = 'none';
                    document.getElementById('accessDeniedContainer').style.display = 'none';
                    document.getElementById('websiteFrame').src = targetWebsite;
                    document.getElementById('websiteFrame').style.display = 'block';
                } else {
                    // Invalid OTP
                    messageDiv.className = "message error";
                    messageDiv.textContent = "Invalid OTP. Please try again.";
                }
            } catch (error) {
                console.error("Error during verification:", error);
                messageDiv.className = "message error";
                messageDiv.textContent = "Verification failed. Please try again.";
            }
        }
    </script>
</body>
</html>